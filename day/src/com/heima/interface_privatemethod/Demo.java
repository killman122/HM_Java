package com.heima.interface_privatemethod;

public class Demo {

}

interface Inter {
    public default void start() {
        System.out.println("start方法执行");
//        System.out.println("日志记录");
        log();//抽取多个默认方法中的共性在一个新的函数中,但是这个函数不想让实现类使用,就可以使用private修饰
    }
    public default void end() {
        System.out.println("end方法执行");
        log();
    }

    private static void log() {//多个静态方法中抽取的内容需要共享的情况下可以加上static关键字,但是如果前两个方法不是默认方法而是静态方法那么只能将log方法定义为静态方法,应为静态方法只能访问静态成员
        System.out.println("日志记录");
    }
}
/**
 * 在Java中，静态方法和非静态方法主要的区别在于它们的调用方式以及存储位置。
 * 非静态方法（实例方法）：
 * 需要创建类或接口的实例（对象）来调用。
 * 非静态方法可以访问实例变量和实例方法。
 * 非静态方法在对象创建时存在于堆中。
 * 静态方法：
 * 可以通过类名直接调用，无需实例化对象。
 * 静态方法只能访问静态变量和静态方法，不能访问实例变量或实例方法。
 * 静态方法在类加载时就存在于方法区。
 * 因此，在你的情况中，是否在接口中的 log() 方法前添加 static 关键字取决于你的需求。由于在Java 9及其之后的版本中，接口可以包含私有方法（无论是非静态的还是静态的），所以你可以根据是否需要在 log() 方法中访问接口的实例成员来决定是否使用 static。
 * 如果 log() 方法中只包含独立的逻辑，不依赖于接口的实例状态，那么可以将 log() 定义为静态方法，这样更清晰，因为静态方法从语义上来看，不依赖于任何对象状态。
 * 话虽如此，就此情况而言，log() 是一个私有方法，它为接口的默认方法提供了公共的实现逻辑，除非你想让接口的所有实现都共享这个逻辑，否则一般不需要将其声明为静态方法。
 */